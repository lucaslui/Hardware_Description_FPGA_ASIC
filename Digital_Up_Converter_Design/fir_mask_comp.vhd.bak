-------------------------------------------------------------------------------------------------------------------------------------------------------
-- Author: Lucas Lui Motta 					Copyright Unicamp, 2019
-- 													
-- Begin Date: 08/10/2019
--
-- Revision History:  	Date 		  	  Author 			Comments
--  						 	08/10/2019    L. L. Motta 		Created=
-------------------------------------------------------------------------------------------------------------------------------------------------------
-- Purpose:
-- This entity/architecture pair is a stage of the Digital Up Converter.
-------------------------------------------------------------------------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity fir_mask_comp is
	port (
	i_rst    : in  std_logic;
	
	i_clk     : in  std_logic;
	o_clk_x2  : in  std_logic;	  
	
	i_data    : in  std_logic_vector(7 downto 0);	   
	o_data    : out std_logic_vector(15 downto 0);
	
	i_coeff_0 : in  std_logic_vector(7 downto 0);
	i_coeff_1 : in  std_logic_vector(7 downto 0);
	i_coeff_2 : in  std_logic_vector(7 downto 0);
	i_coeff_3 : in  std_logic_vector(7 downto 0));	
end fir_mask_comp;

architecture rtl of fir_mask_comp is

	type t_data_pipe is array (0 to 3) of signed(7 downto 0);
	type t_coeff     is array (0 to 3) of signed(7 downto 0);
	type t_mult      is array (0 to 3) of signed(15 downto 0);
	type t_add_st0   is array (0 to 1) of signed(15+1 downto 0);
	
	signal p_data    : t_data_pipe;
	signal r_coeff   : t_coeff;	
	signal r_mult    : t_mult;
	signal r_add_st0 : t_add_st0;
	signal r_add_st1 : signed(15+2  downto 0);

begin

	---------------------------------------------------------------------------
	-- input_proc: this process pipeline the inputs
	---------------------------------------------------------------------------
	proc_input : process(i_rst,i_clk)
	begin
	  if(i_rst='0') then
		 p_data  <= (others=>(others=>'0'));
		 r_coeff <= (others=>(others=>'0'));
	  elsif(rising_edge(i_clk)) then
		 p_data      <= signed(i_data) & p_data(0 to p_data'length-2);
		 r_coeff(0)  <= signed(i_coeff_0);
		 r_coeff(1)  <= signed(i_coeff_1);
		 r_coeff(2)  <= signed(i_coeff_2);
		 r_coeff(3)  <= signed(i_coeff_3);
	  end if;
	end process proc_input;
	
	---------------------------------------------------------------------------
	-- p_input: this process dumultiplexes the inputs and registers the
	-- demultiplexed signals
	---------------------------------------------------------------------------
	proc_mult : process(i_rst,i_clk)
	begin
	  if(i_rst='0') then
		 r_mult <= (others=>(others=>'0'));
	  elsif(rising_edge(i_clk)) then
		 for k in 0 to 3 loop
			r_mult(k) <= p_data(k) * r_coeff(k);
		 end loop;
	  end if;
	end process proc_mult;
	
	---------------------------------------------------------------------------
	-- p_input: this process dumultiplexes the inputs and registers the
	-- demultiplexed signals
	---------------------------------------------------------------------------
	proc_add_st0 : process(i_rst,i_clk)
	begin
	  if(i_rst='0') then
		 r_add_st0 <= (others=>(others=>'0'));
	  elsif(rising_edge(i_clk)) then
		 for k in 0 to 1 loop
			r_add_st0(k) <= resize(r_mult(2*k),17)  + resize(r_mult(2*k+1),17);
		 end loop;
	  end if;
	end process proc_add_st0;
	
	---------------------------------------------------------------------------
	-- p_input: this process dumultiplexes the inputs and registers the
	-- demultiplexed signals
	---------------------------------------------------------------------------
	proc_add_st1 : process(i_rst,i_clk)
	begin
	  if(i_rst='0') then
		 r_add_st1 <= (others=>'0');
	  elsif(rising_edge(i_clk)) then
		 r_add_st1 <= resize(r_add_st0(0),18)  + resize(r_add_st0(1),18);
	  end if;
	end process proc_add_st1;
	
	---------------------------------------------------------------------------
	-- p_input: this process dumultiplexes the inputs and registers the
	-- demultiplexed signals
	---------------------------------------------------------------------------
	proc_output : process(i_rst,i_clk)
	begin
	  if(i_rst='0') then
		 o_data <= (others=>'0');
	  elsif(rising_edge(i_clk)) then
		 o_data <= std_logic_vector(r_add_st1(17 downto 8));
	  end if;
	end process proc_output;

end rtl;
